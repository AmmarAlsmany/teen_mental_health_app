// Teen Mental Health App - Prisma Schema
// Comprehensive database schema for teenagers (10-19) with depression support

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// User model with age verification for teenagers (10-19)
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  firstName         String
  lastName          String
  age               Int      // Restricted to 10-19 in application logic
  emergencyContact  String?  // Parent/guardian email
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isActive          Boolean  @default(true)
  
  // Relations
  medications       Medication[]
  dailyLogs         DailyLog[]
  chatSessions      ChatSession[]
  accounts          Account[]
  sessions          Session[]
  
  @@map("users")
}

// Medication tracking
model Medication {
  id            String   @id @default(cuid())
  name          String
  dosage        String?
  frequency     String?  // e.g., "Daily", "Twice daily", "As needed"
  reminderTimes String?  // JSON array of reminder times in HH:MM format ["08:00", "20:00"]
  reminderDate  String?  // Date for reminder in YYYY-MM-DD format
  notes         String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  
  @@map("medications")
}

// Daily tracking across 5 categories: Mood, Sleep, Energy, Appetite, Context
model DailyLog {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  
  // 1. MOOD TRACKING
  moodRating          Int?     // Overall mood (1-10 scale)
  emotionCheckboxes   String?  // JSON array of selected emotions
  emotionIntensity    Int?     // Intensity of dominant emotion (1-10)
  positiveMoments     String?  // Text: what went well today
  
  // 2. SLEEP TRACKING  
  sleepQuality        Int?     // Sleep quality (1-5 scale)
  sleepDuration       String?  // Categories: "<4h", "4-6h", "6-8h", "8-10h", ">10h"
  sleepDifficulties   String?  // JSON array: trouble falling asleep, staying asleep, etc.
  bedTime             String?  // Bedtime as string "HH:MM"
  wakeUpTime          String?  // Wake up time as string "HH:MM"
  
  // 3. ENERGY TRACKING
  energyLevel         Int?     // Energy level (1-10 scale)
  energyFluctuations  String?  // How energy changed throughout day
  functionalImpact    String?  // How energy affected daily activities
  
  // 4. APPETITE TRACKING
  appetiteRating      Int?     // Appetite level (1-5 scale)  
  appetiteComparison  String?  // "much_less", "less", "normal", "more", "much_more"
  mealRegularity      String?  // JSON array - Which meals eaten: "breakfast", "lunch", "dinner", "snacks"
  
  // 5. CONTEXTUAL FACTORS
  medicationTaken     Boolean? // Did they take prescribed medication
  selfCareActivities  String?  // JSON array of self-care done today
  socialInteractions  String?  // JSON array - Types of social contact
  stressors           String?  // JSON array - What caused stress today
  copingStrategies    String?  // JSON array - How they handled stress
  
  // Additional tracking
  gratefulFor         String?  // What they're grateful for
  notes               String?  // Personal notes and reflections
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  
  @@unique([userId, date])
  @@map("daily_logs")
}


// AI Chat sessions and history
model ChatSession {
  id          String   @id @default(cuid())
  title       String?  // Optional session title
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  messages    ChatMessage[]
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  
  @@map("chat_sessions")
}

model ChatMessage {
  id          String   @id @default(cuid())
  content     String
  role        String   // "user" or "assistant"
  timestamp   DateTime @default(now())
  
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId   String
  
  @@map("chat_messages")
}

// Crisis resources and emergency contacts
model CrisisResource {
  id          String   @id @default(cuid())
  name        String
  phoneNumber String?
  website     String?
  description String?
  country     String   @default("US")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  @@map("crisis_resources")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
